{"version":3,"sources":["webpack:///./js/task_1.js","webpack:///./js/task_2.js","webpack:///./js/task_3.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","makeTransaction","min","max","id","amount","Math","floor","random","canProcess","reject","logSuccess","logError","warn","catch"],"mappings":"2JAAMA,EAAQ,SAAAC,GACV,OAAO,IAAIC,SAAQ,SAAAC,GACfC,YAAW,WACTD,EAAQF,KACPA,OAILI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,4BAAyCF,EAAzC,OAEvBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,G,kCCZXK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GACjC,OAAQ,IAAIb,SAAQ,SAAAC,GACnBA,EAAQW,EAASE,KAAI,SAAAC,GAAI,OAAIA,EAAKN,OAASI,EAAd,iBAA8BE,EAA9B,CAAoCL,QAASK,EAAKL,SAAWK,UAIvFZ,EAAS,SAAAa,GAAY,OAAIX,QAAQY,MAAM,UAAWD,IAExDL,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GChBnC,IAKMe,EAAkB,SAAC,GAAiB,IALPC,EAAKC,EAKdC,EAAgB,EAAhBA,GAClBvB,GADkC,EAAZwB,OALKH,EAMO,IANFC,EAMO,IALtCG,KAAKC,MAAMD,KAAKE,UAAYL,EAAMD,EAAM,GAAKA,IAM9CO,EAAaH,KAAKE,SAAW,GAEnC,OAAO,IAAIzB,SAAQ,SAACC,EAAS0B,GAE3BzB,YAAW,WACLwB,GACFzB,EAAQ,CAACoB,KAAIjB,KAAMN,IAGrB6B,EAAON,KACNvB,OAKD8B,EAAa,SAAC,GAAe,IAAdP,EAAc,EAAdA,GAAIjB,EAAU,EAAVA,KACvBC,QAAQC,IAAI,UAAZ,eAAsCe,EAAtC,iBAAyDjB,EAAzD,OAGIyB,EAAW,SAAAR,GACfhB,QAAQyB,KAAK,UAAb,gCAAwDT,EAAxD,8BAIFH,EAAgB,CAAEG,GAAI,GAAIC,OAAQ,MAC/Bf,KAAKqB,GACLG,MAAMF,GAETX,EAAgB,CAAEG,GAAI,GAAIC,OAAQ,MAC/Bf,KAAKqB,GACLG,MAAMF,GAETX,EAAgB,CAAEG,GAAI,GAAIC,OAAQ,KAC/Bf,KAAKqB,GACLG,MAAMF,GAETX,EAAgB,CAAEG,GAAI,GAAIC,OAAQ,MAC/Bf,KAAKqB,GACLG,MAAMF,K","file":"main.7e5e90357d8db2c5f21b.js","sourcesContent":["const delay = ms => {\r\n    return new Promise(resolve => {\r\n        setTimeout(() => {\r\n          resolve(ms);\r\n        }, ms);\r\n    });    \r\n};\r\n\r\nconst logger = time => console.log(`Task_1:`, `Resolved after ${time}ms`);\r\n\r\ndelay(2000).then(logger);\r\ndelay(1000).then(logger);\r\ndelay(1500).then(logger);\r\n\r\n","const users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n  return  new Promise(resolve => {\r\n   resolve(allUsers.map(user => user.name === userName ? { ...user, active: !user.active } : user)) \r\n  })\r\n}\r\n\r\nconst logger = updatedUsers => console.table('Task_2:', updatedUsers) ;\r\n\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);\r\n\r\n","const randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\n\r\nconst makeTransaction = ({id, amount}) => {\r\n  const delay = randomIntegerFromInterval(200, 500);\r\n  const canProcess = Math.random() > 0.3;\r\n\r\n  return new Promise((resolve, reject) => {\r\n    \r\n    setTimeout(() => {\r\n      if (canProcess) {\r\n        resolve({id, time: delay})\r\n      }\r\n\r\n      reject(id);\r\n    }, delay);\r\n\r\n  })\r\n};\r\n\r\nconst logSuccess = ({id, time}) => {\r\n  console.log('Task_3:', `Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn('Task_3:', `Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\n\r\nmakeTransaction({ id: 70, amount: 150 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 })\r\n  .then(logSuccess)\r\n  .catch(logError);"],"sourceRoot":""}